package S1226_미로1;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Solution {
    
    // 미로의 크기 정의
    static final int SIZE = 16;
    // 이동 방향 (상, 하, 좌, 우)
    static final int[] dx = {0, 0, -1, 1};
    static final int[] dy = {-1, 1, 0, 0};
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(input);
        
        // 테스트 케이스는 10개
        for (int t = 1; t <= 10; t++) {
            sc.nextInt();  // 테스트 케이스 번호 입력 날리기
            
            // 미로 입력받기
            int[][] maze = new int[SIZE][SIZE];
            for (int i = 0; i < SIZE; i++) {
                String row = sc.next(); //한줄로 입력받고
                for (int j = 0; j < SIZE; j++) {
                    maze[i][j] = row.charAt(j) - '0';  // 문자열을 숫자로 변환
                }
            }//미로 입력 완.
            
            
            
            // 출발점 (1, 1)과 도착점 (13, 13)으로 설정
            boolean result = bfs(maze, 1, 1);
            
            // 결과 출력 (1: 도달 가능, 0: 도달 불가능)
            System.out.println("#" + t + " " + (result ? 1 : 0));
        }
        sc.close();
    }
    
    // BFS를 이용하여 경로 찾기
    public static boolean bfs(int[][] maze, int startX, int startY) {
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[SIZE][SIZE];
        
        // 시작점 큐에 추가 및 방문 처리
        queue.add(new int[]{startX, startY}); //탐색할 좌표를 담음 -> 처음에는 (1, 1)로
        visited[startX][startY] = true; //위에서 큐에 담았으니까 true로 바꿈 -> 지나왔던 길은 다시 가지않음
        
        while (!queue.isEmpty()) {//큐에서 내용들이 모두 빠져나갈 때까지. -> 더이상 탐색할 것이 없다.
        	
        	//두번째 턴부터는 이제 아까 "가능했던" 상, 하, 좌, 우 좌표들을 큐에 넣어놨으니까 하나씩 탐색.
        	
            int[] current = queue.poll();//현재 좌표를 꺼냄 , 큐에서 빠져나감
            int x = current[0]; //현재 위치의 x좌표
            int y = current[1]; //현재 위치의 y좌표
            
            // 현재 좌표 = 도착점의 좌표값 =3 -> 도달하면 true 반환
            if (maze[x][y] == 3) { 
                return true;
            }
            
            // 네 방향으로 이동 -> 현재 위치에서 상하좌우로 움직임 -> 4번의 반복문을 통해
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                
                // 범위 안에 있고, 벽이 아니며, 방문하지 않은 곳이면 이동
                if (nx >= 0 && ny >= 0 && nx < SIZE && ny < SIZE && maze[nx][ny] != 1 && !visited[nx][ny]) {
                    queue.add(new int[]{nx, ny}); //이동이 된다면 그 값을 다시 큐에 넣음
                    visited[nx][ny] = true;
                }
            }//상하좌우 탐색을 끝내고, 상하좌우 중 가능한 길은 true로 다 바꿈.
        }
        
        // 도착점에 도달하지 못하면 false 반환
        return false;
    }
    
    
    static String input = "1\r\n"
    		+ "1111111111111111\r\n"
    		+ "1210000000100011\r\n"
    		+ "1010101110101111\r\n"
    		+ "1000100010100011\r\n"
    		+ "1111111010101011\r\n"
    		+ "1000000010101011\r\n"
    		+ "1011111110111011\r\n"
    		+ "1010000010001011\r\n"
    		+ "1010101111101011\r\n"
    		+ "1010100010001011\r\n"
    		+ "1010111010111011\r\n"
    		+ "1010001000100011\r\n"
    		+ "1011101111101011\r\n"
    		+ "1000100000001311\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "2\r\n"
    		+ "1111111111111111\r\n"
    		+ "1200000010000011\r\n"
    		+ "1011111011111011\r\n"
    		+ "1000001010000011\r\n"
    		+ "1110101010111011\r\n"
    		+ "1010101010100011\r\n"
    		+ "1011111010111111\r\n"
    		+ "1000001010000011\r\n"
    		+ "1011101011111011\r\n"
    		+ "1010101010000011\r\n"
    		+ "1010101010111111\r\n"
    		+ "1010100000130011\r\n"
    		+ "1010111111111011\r\n"
    		+ "1000000000000011\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "3\r\n"
    		+ "1111111111111111\r\n"
    		+ "1210001000100011\r\n"
    		+ "1010101010101011\r\n"
    		+ "1000100010101011\r\n"
    		+ "1011111110101011\r\n"
    		+ "1000001010101011\r\n"
    		+ "1111101010101011\r\n"
    		+ "1010001000001011\r\n"
    		+ "1010111111111011\r\n"
    		+ "1010000000100011\r\n"
    		+ "1011111110101111\r\n"
    		+ "1000001010100011\r\n"
    		+ "1011101010111011\r\n"
    		+ "1000100000130011\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "4\r\n"
    		+ "1111111111111111\r\n"
    		+ "1200100000000011\r\n"
    		+ "1011101110111011\r\n"
    		+ "1000001010101011\r\n"
    		+ "1111111011101011\r\n"
    		+ "1000100010000011\r\n"
    		+ "1010101010111111\r\n"
    		+ "1010001010001011\r\n"
    		+ "1011111011101011\r\n"
    		+ "1000100010100011\r\n"
    		+ "1110101110111111\r\n"
    		+ "1010100000130011\r\n"
    		+ "1010111111111011\r\n"
    		+ "1000000000000011\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "5\r\n"
    		+ "1111111111111111\r\n"
    		+ "1210000000100011\r\n"
    		+ "1010111011101011\r\n"
    		+ "1010100010001011\r\n"
    		+ "1011101010111011\r\n"
    		+ "1000001010001011\r\n"
    		+ "1111111011111011\r\n"
    		+ "1000100010000011\r\n"
    		+ "1011101010111011\r\n"
    		+ "1010001000001011\r\n"
    		+ "1010101011111111\r\n"
    		+ "1010101000000011\r\n"
    		+ "1010101110111011\r\n"
    		+ "1000100010001311\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "6\r\n"
    		+ "1111111111111111\r\n"
    		+ "1210001010000011\r\n"
    		+ "1010101010111111\r\n"
    		+ "1010100000100011\r\n"
    		+ "1010111111101011\r\n"
    		+ "1000100000001011\r\n"
    		+ "1110101111111011\r\n"
    		+ "1000100000001011\r\n"
    		+ "1011101111101011\r\n"
    		+ "1000101000101011\r\n"
    		+ "1110101010111011\r\n"
    		+ "1010100010100011\r\n"
    		+ "1010111110101111\r\n"
    		+ "1000000000100311\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "7\r\n"
    		+ "1111111111111111\r\n"
    		+ "1210000000000011\r\n"
    		+ "1011101111111011\r\n"
    		+ "1000101010000011\r\n"
    		+ "1110101010111011\r\n"
    		+ "1000001000101011\r\n"
    		+ "1010111111101111\r\n"
    		+ "1010100000100011\r\n"
    		+ "1011101110101111\r\n"
    		+ "1000001000100011\r\n"
    		+ "1111111011111011\r\n"
    		+ "1000100010001011\r\n"
    		+ "1010101110111011\r\n"
    		+ "1010001300000011\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "8\r\n"
    		+ "1111111111111111\r\n"
    		+ "1200000010000011\r\n"
    		+ "1111111010111011\r\n"
    		+ "1000000010001011\r\n"
    		+ "1011111111111011\r\n"
    		+ "1010000000000011\r\n"
    		+ "1010111111101011\r\n"
    		+ "1010000000001011\r\n"
    		+ "1010111011111011\r\n"
    		+ "1000100010001011\r\n"
    		+ "1111111011101011\r\n"
    		+ "1000001000100011\r\n"
    		+ "1110111110101011\r\n"
    		+ "1000000000101311\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "9\r\n"
    		+ "1111111111111111\r\n"
    		+ "1200000000001011\r\n"
    		+ "1011111111101011\r\n"
    		+ "1000000010001011\r\n"
    		+ "1111111010111011\r\n"
    		+ "1000100010000011\r\n"
    		+ "1011101111111011\r\n"
    		+ "1010001000001011\r\n"
    		+ "1010111011101011\r\n"
    		+ "1010000010101311\r\n"
    		+ "1011111110101111\r\n"
    		+ "1000100000100011\r\n"
    		+ "1011101011111011\r\n"
    		+ "1000001000000011\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111\r\n"
    		+ "10\r\n"
    		+ "1111111111111111\r\n"
    		+ "1200001000100011\r\n"
    		+ "1111101110101011\r\n"
    		+ "1000100010001011\r\n"
    		+ "1011101111101111\r\n"
    		+ "1000100000000011\r\n"
    		+ "1110111111101011\r\n"
    		+ "1000000010001011\r\n"
    		+ "1110111011101011\r\n"
    		+ "1010001000001011\r\n"
    		+ "1010101111111011\r\n"
    		+ "1000101010000011\r\n"
    		+ "1010101010101111\r\n"
    		+ "1010100000100311\r\n"
    		+ "1111111111111111\r\n"
    		+ "1111111111111111";
}

